arguments: contributed/add_data.py
--------------------
tensorflow version: 1.10.1
--------------------
git hash: b'096ed770f163957c1e56efa7feeb194773920f6e'
--------------------
b'diff --git a/contributed/face.py b/contributed/face.py\nindex 97b9500..9e41706 100644\n--- a/contributed/face.py\n+++ b/contributed/face.py\n@@ -42,8 +42,8 @@ import facenet\n \n \n gpu_memory_fraction = 0.3\n-facenet_model_checkpoint = os.path.dirname(__file__) + "/../model_checkpoints/20170512-110547"\n-classifier_model = os.path.dirname(__file__) + "/../model_checkpoints/my_classifier_1.pkl"\n+facenet_model_checkpoint = os.path.dirname(__file__) + "/../20180402-114759"\n+classifier_model = os.path.dirname(__file__) + "/../my_classifier.pkl"\n debug = False\n \n \n@@ -86,13 +86,19 @@ class Recognition:\n class Identifier:\n     def __init__(self):\n         with open(classifier_model, \'rb\') as infile:\n-            self.model, self.class_names = pickle.load(infile)\n+            self.model, self.class_names = pickle.load(infile, encoding=\'latin1\')\n \n     def identify(self, face):\n         if face.embedding is not None:\n             predictions = self.model.predict_proba([face.embedding])\n+            print(\'predictions = \', predictions)\n             best_class_indices = np.argmax(predictions, axis=1)\n-            return self.class_names[best_class_indices[0]]\n+            prob = predictions[0][best_class_indices[0]]\n+            if prob < 0.75:\n+                return \'unknown\'\n+            else:\n+                result = self.class_names[best_class_indices[0]] + \' \' + \'%.2f\' % prob\n+                return result\n \n \n class Encoder:\n@@ -116,8 +122,8 @@ class Encoder:\n \n class Detection:\n     # face detection parameters\n-    minsize = 20  # minimum size of face\n-    threshold = [0.6, 0.7, 0.7]  # three steps\'s threshold\n+    minsize = 40  # minimum size of face\n+    threshold = [0.6, 0.7, 0.8]  # three steps\'s threshold\n     factor = 0.709  # scale factor\n \n     def __init__(self, face_crop_size=160, face_crop_margin=32):\ndiff --git a/contributed/real_time_face_recognition.py b/contributed/real_time_face_recognition.py\nindex 8971606..8e20270 100644\n--- a/contributed/real_time_face_recognition.py\n+++ b/contributed/real_time_face_recognition.py\n@@ -31,17 +31,24 @@ import time\n import cv2\n \n import face\n+import matplotlib.pyplot as plt\n \n \n def add_overlays(frame, faces, frame_rate):\n     if faces is not None:\n         for face in faces:\n             face_bb = face.bounding_box.astype(int)\n-            cv2.rectangle(frame,\n+            if face.name is not None:\n+                if face.name == \'unknown\':\n+                    cv2.rectangle(frame,\n+                          (face_bb[0], face_bb[1]), (face_bb[2], face_bb[3]),\n+                          (0, 127, 127), 2)\n+                    cv2.putText(frame, face.name, (face_bb[0], face_bb[3]), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 127, 127), thickness=2, lineType=1)\n+                else:\n+                    cv2.rectangle(frame,\n                           (face_bb[0], face_bb[1]), (face_bb[2], face_bb[3]),\n                           (0, 255, 0), 2)\n-            if face.name is not None:\n-                cv2.putText(frame, face.name, (face_bb[0], face_bb[3]),\n+                    cv2.putText(frame, face.name, (face_bb[0], face_bb[3]),\n                             cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0),\n                             thickness=2, lineType=2)\n \n@@ -57,6 +64,7 @@ def main(args):\n     frame_count = 0\n \n     video_capture = cv2.VideoCapture(0)\n+#    plt.ion()\n     face_recognition = face.Recognition()\n     start_time = time.time()\n \n@@ -83,7 +91,8 @@ def main(args):\n         frame_count += 1\n         cv2.imshow(\'Video\', frame)\n \n-        if cv2.waitKey(1) & 0xFF == ord(\'q\'):\n+        k = cv2.waitKey(1)\n+        if k == ord(\'q\'):\n             break\n \n     # When everything is done, release the capture\ndiff --git a/src/align/align_dataset_mtcnn.py b/src/align/align_dataset_mtcnn.py\nindex 7d5e735..148b10b 100644\n--- a/src/align/align_dataset_mtcnn.py\n+++ b/src/align/align_dataset_mtcnn.py\n@@ -144,9 +144,9 @@ def parse_arguments(argv):\n     parser.add_argument(\'input_dir\', type=str, help=\'Directory with unaligned images.\')\n     parser.add_argument(\'output_dir\', type=str, help=\'Directory with aligned face thumbnails.\')\n     parser.add_argument(\'--image_size\', type=int,\n-        help=\'Image size (height, width) in pixels.\', default=182)\n+        help=\'Image size (height, width) in pixels.\', default=160)\n     parser.add_argument(\'--margin\', type=int,\n-        help=\'Margin for the crop around the bounding box (height, width) in pixels.\', default=44)\n+        help=\'Margin for the crop around the bounding box (height, width) in pixels.\', default=32)\n     parser.add_argument(\'--random_order\', \n         help=\'Shuffles the order of images to enable alignment using multiple processes.\', action=\'store_true\')\n     parser.add_argument(\'--gpu_memory_fraction\', type=float,\n@@ -157,3 +157,8 @@ def parse_arguments(argv):\n \n if __name__ == \'__main__\':\n     main(parse_arguments(sys.argv[1:]))\n+\n+def process(arg_list):\n+    args = parse_arguments(arg_list)\n+    print(args)\n+    main(args)\ndiff --git a/src/classifier.py b/src/classifier.py\nindex 749db4d..5734434 100644\n--- a/src/classifier.py\n+++ b/src/classifier.py\n@@ -117,7 +117,7 @@ def main(args):\n                 \n                 for i in range(len(best_class_indices)):\n                     print(\'%4d  %s: %.3f\' % (i, class_names[best_class_indices[i]], best_class_probabilities[i]))\n-                    \n+                print(best_class_indices, "ans=", labels)    \n                 accuracy = np.mean(np.equal(best_class_indices, labels))\n                 print(\'Accuracy: %.3f\' % accuracy)'